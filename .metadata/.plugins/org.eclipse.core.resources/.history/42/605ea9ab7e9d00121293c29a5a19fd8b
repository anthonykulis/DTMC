/*
 * tt.c
 *
 *  Created on: Apr 4, 2013
 *      Author: kulis
 */

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>

pthread_mutex_t t1_lock;
pthread_cond_t t1_cond;

struct thread_data {

	int id;
	int phase;
	int period;
	int relative_deadline;
	int execution_time;
	int complete;

};

void* p1_task(void *thread_arg){

	struct thread_data *td = (struct thread_data *)thread_arg;

	while(1){
		pthread_cond_wait(&t1_cond, &t1_lock);
		fprintf(stdout, "Doing task\n");
		td->complete = 0;
		usleep(td->execution_time);
		td->complete = 1;
		fprintf(stdout, "Done\n");
		pthread_yield();

	}

	pthread_exit(NULL);
	return NULL;
}

void* sched(void *thread_arg){

	struct thread_data *td  = (struct thread_data *) &thread_arg;

	int i = 0;
	for(; i < 10; i++){
		usleep(1);
		if(td->complete)
			pthread_cond_signal(&t1_cond);

	}
	pthread_exit(NULL);
	return NULL;
}

int main(){

	struct thread_data t;
	t.execution_time = 100000;
	t.id = 1;
	t.period = 100;
	t.phase = 0;
	t.relative_deadline = 200000;
	pthread_t t1;
	int rc = pthread_create(&t1, NULL, p1_task, (void *) &t);
    void* status;
//	/pthread_join(rc, &status);
	pthread_exit(NULL);
}
