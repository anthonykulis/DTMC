/*
 * graph_test.c
 *
 *  Created on: Mar 29, 2013
 *      Author: kulis
 */

#include "graph.h"

#include <stdlib.h>
#include <stdio.h>

int main(){

	//come to intersection and go east
	fprintf(stdout, "Node A: Pushing  E1 S1 W1 N1\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	int dir = get_next_direction(1, 1, 1, 1);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	//next 4 way, go south
	fprintf(stdout, "Node B: Pushing  E1 S1 W1 N1\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	dir = get_next_direction(1, 1, 1, 1);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	//come to dead end, must go north
	fprintf(stdout, "Node C: Pushing  E0 S0 W0 N1\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	dir = get_next_direction(0, 0, 0, 1);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	//revisit intersection and go east
	fprintf(stdout, "Backtracked to B:  E1 S1 W1 N1\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	dir = get_next_direction(1, 1, 1, 1);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	//now come to one that only gives east, north, and back west, should go east
	fprintf(stdout, "Node D: E1 S0 W1 N1\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	dir = get_next_direction(1, 0, 1, 1);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	//now come to dead end, back track
	fprintf(stdout, "Node E: Pushing  E0 S0 W1 N0\n");
	fprintf(stdout, "Heading is: %d\n", get_hd());
	dir = get_next_direction(0, 0, 1, 0);
	fprintf(stdout, "stack pointer: %d\n", get_sr());
	fprintf(stdout, "Resulting direction: %d\n\n", dir);

	return EXIT_SUCCESS;

}
