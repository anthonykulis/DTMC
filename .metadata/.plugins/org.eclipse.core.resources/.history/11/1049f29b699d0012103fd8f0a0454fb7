#include <stdio.h>
#include <stdlib.h>
#include <linux/i2c-dev.h>
#include <fcntl.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <unistd.h>


#define CR1 	0x20
#define CR2 	0x21
#define CR3 	0x22
#define CR4 	0x23
#define X_LSB 	0x28
#define X_MSB 	0x29
#define Y_LSB 	0x2A
#define Y_MSB 	0x2B
#define Z_LSB	0x2C
#define Z_MSB 	0x2D

int initialize(int fd){

	unsigned char init_buf[6][2] = {{CR1, 0x1F}, {CR3 , 0x08}, {CR4 , 0x80}};

	int i = 0;
	for(; i < 3; i++){
		if(write(fd,  init_buf[i], 2) != 2) return 0;
		
	}
	usleep(100000);
	
	return 1;
}

int read_gyro(int fd){

	unsigned char x_msb[1] = {0}, x_lsb[1] = {0}, 
		      y_msb[1] = {0}, y_lsb[1] = {0}, 
		      z_msb[1] = {0}, z_lsb[1] = {0};

	unsigned char rxh[1] = {0x29}, rxl[1] = {0x28},
		      ryh[1] = {0x2B}, ryl[1] = {0x2A},
		      rzh[1] = {0x2D}, rzl[1] = {0x2C};

	if(write(fd, rxh, 1) != 1){
		fprintf(stderr, "Failed to write request for X-axis MSB\n");
		return 0;
	}

	if(read(fd, x_msb, 1) != 1){
		fprintf(stderr, "Failed to read X-axis MSB\n");
		return 0;
	}

	if(write(fd, rxl, 1) != 1){
		fprintf(stderr, "Failed to write request for X-axis LSB\n");
		return 0;
	}

	if(read(fd, x_lsb, 1) != 1){
		fprintf(stderr, "Failed to read X-axis LSB\n");
		return 0;
	}



	if(write(fd, ryh, 1) != 1){
		fprintf(stderr, "Failed to write request for Y-axis MSB\n");
		return 0;
	}

	if(read(fd, y_msb, 1) != 1){
		fprintf(stderr, "Failed to read Y-axis MSB\n");
		return 0;
	}

	if(write(fd, ryl, 1) != 1){
		fprintf(stderr, "Failed to write request for Y-axis LSB\n");
		return 0;
	}

	if(read(fd, y_lsb, 1) != 1){
		fprintf(stderr, "Failed to read Y-axis LSB\n");
		return 0;
	}
	if(write(fd, rzh, 1) != 1){
		fprintf(stderr, "Failed to write request for Z-axis MSB\n");
		return 0;
	}

	if(read(fd, z_msb, 1) != 1){
		fprintf(stderr, "Failed to read Z-axis MSB\n");
		return 0;
	}

	if(write(fd, rzl, 1) != 1){
		fprintf(stderr, "Failed to write request for Z-axis LSB\n");
		return 0;
	}

	if(read(fd, z_lsb, 1) != 1){
		fprintf(stderr, "Failed to read Z-axis LSB\n");
		return 0;
	}

	int sign = (int)(x_msb[0] >> 7);
	int x = 0;
	if(sign){
		x_msb[0] ^= 0xFF;
		x_lsb[0] ^= 0xFF;
	}

	x = (int)(x_msb[0] << 8 | x_lsb[0]);
	x = sign ? x * -1 : x;

	sign = (int)(y_msb[0] >> 7);
	int y = 0;
	if(sign){
		y_msb[0] ^= 0xFF;
		y_lsb[0] ^= 0xFF;
	}
	
	y = (int)(y_msb[0] << 8 | y_lsb[0]);
	y = sign ? y * -1 : x;
	int z = 0;
	sign = (int)(z_msb[0] >> 7);
	if(sign){
		z_msb[0] ^= 0xFF;
		z_lsb[0] ^= 0xFF;
	}

	z =  (int)(x_msb[0] << 8 | z_lsb[0]);
	z = sign ? z * -1 : z;

	fprintf(stdout, "%d:%d:%d\n", x/100, y/100, z/100); 
	
	return 1;
}

int main(int argc, char**argv){

	int fd = 0;
	int add = 0x69;

	if(argc != 2){
		fprintf(stderr, "Usage: %s <i2c port>\n", argv[0]);
		return EXIT_FAILURE;
	}

	char *fn = argv[1];


	if((fd = open(fn, O_RDWR)) < 0){
		fprintf(stderr, "Unable to open: %s\n", fn);
		return EXIT_FAILURE;
	}

	if(ioctl(fd, I2C_SLAVE, add) < 0){
		fprintf(stderr, "Unable to access i2c bus\n");
		return EXIT_FAILURE;
	}

	if(!initialize(fd)){
		fprintf(stderr, "Failed to write initialization values\n");
		return EXIT_FAILURE;
	}

	while(1){
		if(!read_gyro(fd)) break;
		usleep(250000);
	}
	
	return EXIT_SUCCESS;
}
